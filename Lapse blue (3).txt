local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Debris = game:GetService("Debris")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local root = character:WaitForChild("HumanoidRootPart")

-- Settings
local BALL_COUNT = 1
local ORBIT_RADIUS = 35
local ORBIT_SPEED = 5
local UP_DOWN_RANGE = 10
local UP_DOWN_SPEED = 2
local BALL_SIZE = 15
local FADE_TIME = 1.5 -- seconds it takes to fade
local LIFETIME = 5 -- seconds before fading begins
local PULL_RADIUS = 25
local PULL_VELOCITY = 250
local PULL_FORCE = 400000

local balls = {}

-- Get nearby unanchored parts
local function getNearbyUnanchoredParts(centerPos, range)
	local region = Region3.new(centerPos - Vector3.new(range, range, range), centerPos + Vector3.new(range, range, range))
	local parts = workspace:FindPartsInRegion3WithIgnoreList(region, {player.Character}, math.huge)
	local valid = {}

	for _, part in ipairs(parts) do
		if part:IsA("BasePart") and not part.Anchored and not part:IsDescendantOf(player.Character) then
			table.insert(valid, part)
		end
	end
	return valid
end

-- Function to create a glowing blue ball
local function createBall()
	local part = Instance.new("Part")
	part.Shape = Enum.PartType.Ball
	part.Size = Vector3.new(BALL_SIZE, BALL_SIZE, BALL_SIZE)
	part.Material = Enum.Material.Neon
	part.Color = Color3.fromRGB(0, 162, 255)
	part.Anchored = true
	part.CanCollide = false
	part.Transparency = 0

	local light = Instance.new("PointLight")
	light.Color = part.Color
	light.Brightness = 2
	light.Range = 8
	light.Parent = part

	part.Parent = workspace
	return part, light
end

-- Initialize balls
for i = 1, BALL_COUNT do
	local part, light = createBall()
	local ballData = {
		part = part,
		light = light,
		angle = math.random() * math.pi * 2,
		heightOffset = math.random() * math.pi * 2,
		verticalSpeed = math.random(1, 3) / 1.5,
		baseOrbitSpeed = ORBIT_SPEED,
		baseVerticalSpeed = UP_DOWN_SPEED,
		fadeStartTime = nil,
	}
	table.insert(balls, ballData)

	-- Begin fade after lifetime
	task.delay(LIFETIME, function()
		ballData.fadeStartTime = tick()
	end)
end

-- Orbit + Pull update loop
RunService.RenderStepped:Connect(function(dt)
	local now = tick()

	for _, ball in ipairs(balls) do
		local part = ball.part
		if not part or not part.Parent then continue end

		-- Handle fading
		local alpha = 0
		if ball.fadeStartTime then
			local elapsed = now - ball.fadeStartTime
			alpha = math.clamp(elapsed / FADE_TIME, 0, 1)

			part.Transparency = alpha
			ball.light.Brightness = 2 * (1 - alpha)

			if alpha >= 1 then
				part:Destroy()
				ball.part = nil
				continue
			end
		end

		-- Slow down as it fades
		local fadeMultiplier = 1 - alpha
		local orbitSpeed = ball.baseOrbitSpeed * fadeMultiplier
		local verticalSpeed = ball.baseVerticalSpeed * fadeMultiplier

		ball.angle += orbitSpeed * dt
		ball.heightOffset += verticalSpeed * dt

		-- New position
		local x = math.cos(ball.angle) * ORBIT_RADIUS
		local z = math.sin(ball.angle) * ORBIT_RADIUS
		local y = math.sin(ball.heightOffset) * UP_DOWN_RANGE
		local currentPos = root.Position + Vector3.new(x, y + 3, z)

		part.Position = currentPos

		-- Pull unanchored parts
		local nearbyParts = getNearbyUnanchoredParts(currentPos, PULL_RADIUS)
		for _, target in ipairs(nearbyParts) do
			local direction = (currentPos - target.Position)
			if direction.Magnitude == 0 then continue end

			local bv = Instance.new("BodyVelocity")
			bv.Velocity = direction.Unit * PULL_VELOCITY
			bv.MaxForce = Vector3.new(PULL_FORCE, PULL_FORCE, PULL_FORCE)
			bv.P = PULL_FORCE
			bv.Name = "PullForce"
			bv.Parent = target

			Debris:AddItem(bv, 0.1)
		end
	end
end)